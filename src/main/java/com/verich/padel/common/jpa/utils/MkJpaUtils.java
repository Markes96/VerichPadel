package com.verich.padel.common.jpa.utils;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.util.CollectionUtils;
import com.verich.padel.common.jpa.exception.nullfield.MkJpaAutogeneratedNullIdException;
import com.verich.padel.common.jpa.exception.nullfield.MkJpaNullIdException;
import com.verich.padel.common.jpa.exception.nullfield.MkJpaNullUniqueException;
import com.verich.padel.common.jpa.type.MkJpaEntity;
import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.experimental.UtilityClass;

@UtilityClass
public class MkJpaUtils {

  private final Predicate<Field> isIdField = (field) -> field.isAnnotationPresent(Id.class);

  private final Predicate<Field> isUniqueField = (field) -> {
    if (!field.isAnnotationPresent(Column.class))
      return false;
    return field.getAnnotation(Column.class).unique();
  };

  private final Predicate<Field> isNullableField = (field) -> {
    if (!field.isAnnotationPresent(Column.class))
      return true;
    return field.getAnnotation(Column.class).nullable();
  };

  private final Predicate<Field> isNotNullableField = (field) -> !isNullableField.test(field);

  public <E extends MkJpaEntity> List<Field> findIdFields(final E entity) {
    final Field[] fields = entity.getClass().getDeclaredFields();
    return Stream.of(fields).filter(isIdField).toList();
  }

  public <E extends MkJpaEntity> List<Field> findUniqueFields(final E entity) {
    final Field[] fields = entity.getClass().getDeclaredFields();
    return Stream.of(fields).filter(isUniqueField).toList();
  }

  public <E extends MkJpaEntity> List<Field> findNullableFields(final E entity) {
    final Field[] fields = entity.getClass().getDeclaredFields();
    return Stream.of(fields).filter(isNullableField).toList();
  }

  public <E extends MkJpaEntity> List<Field> findNotNullableFields(final E entity) {
    final Field[] fields = entity.getClass().getDeclaredFields();
    return Stream.of(fields).filter(isNotNullableField).toList();
  }

  public <E extends MkJpaEntity> Example<E> buildIdExample(final E entity) {

    final List<Field> idFiedls = findIdFields(entity);
    final List<Field> notNullIdFields = getNotNullFields(idFiedls, entity);

    if ((notNullIdFields.size() == 0) && (idFiedls.size() == 1) &&
        idFiedls.get(0).isAnnotationPresent(GeneratedValue.class))
      throw new MkJpaAutogeneratedNullIdException(idFiedls.get(0));

    if (idFiedls.size() != notNullIdFields.size())
      throw new MkJpaNullIdException(idFiedls);

    return buildExample(idFiedls, entity);
  }

  public <E extends MkJpaEntity> Example<E> buildUniqueExample(final E entity) {

    final List<Field> uniqueFields = findUniqueFields(entity);
    final List<Field> notNullUniqueFields = getNotNullFields(uniqueFields, entity);

    if (notNullUniqueFields.size() == 0)
      throw new MkJpaNullUniqueException(uniqueFields);

    return buildExample(notNullUniqueFields, entity);
  }

  public <E extends MkJpaEntity> Example<E> buildFlexibleExample(final E entity) {

    try {
      return buildIdExample(entity);
    } catch (final RuntimeException e) {}

    try {
      return buildUniqueExample(entity);
    } catch (final RuntimeException e) {}

    return buildStrictExample(entity);
  }

  public <E extends MkJpaEntity> Example<E> buildStrictExample(final E entity) {
    return Example.of(entity);
  }

  private <E extends MkJpaEntity> Example<E> buildExample(final List<Field> includeFields,
      final E entity) {

    final String[] excludeFields = Stream.of(entity.getClass().getDeclaredFields())
        .filter(field -> !includeFields.contains(field))
        .map(Field::getName)
        .toArray(String[]::new);

    final ExampleMatcher matcher = ExampleMatcher
        .matching()
        .withIgnorePaths(excludeFields);

    return Example.of(entity, matcher);
  }


  // TODO: meter en la clase reflectionUtils

  public List<Field> getNotNullFields(final List<Field> fields, final Object object) {
    if (CollectionUtils.isEmpty(fields))
      return new ArrayList<Field>();

    return fields.stream()
        .filter((field) -> Objects.nonNull(getFieldValue(field, object)))
        .toList();
  }

  public boolean isAnyFieldNull(final List<Field> fields, final Object object) {

    if (CollectionUtils.isEmpty(fields))
      return true;

    for (final Field field : fields) {
      if (Objects.isNull(getFieldValue(field, object)))
        return true;
    }

    return false;
  }

  public boolean isAllFieldsNull(final List<Field> fields, final Object object) {

    if (CollectionUtils.isEmpty(fields))
      return true;

    for (final Field field : fields) {
      if (Objects.nonNull(getFieldValue(field, object)))
        return false;
    }

    return true;
  }

  public Object getFieldValue(final Field field, final Object object) {

    try {
      field.setAccessible(true);
      return field.get(object);
    } catch (final Exception e) {
      return null;
    }

  }

}
