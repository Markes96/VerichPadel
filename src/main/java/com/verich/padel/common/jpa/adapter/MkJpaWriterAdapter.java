package com.verich.padel.common.jpa.adapter;

import static com.verich.padel.common.jpa.utils.MkJpaUtils.buildIdExample;
import static com.verich.padel.common.jpa.utils.MkJpaUtils.buildUniqueExample;
import java.util.List;
import java.util.Optional;
import org.springframework.data.domain.Example;
import org.springframework.transaction.annotation.Transactional;
import com.verich.padel.common.jpa.exception.MkJpaException;
import com.verich.padel.common.jpa.exception.MkJpaNullFieldException;
import com.verich.padel.common.jpa.exception.nullfield.MkJpaAutogeneratedNullIdException;
import com.verich.padel.common.jpa.exception.nullfield.MkJpaNullIdException;
import com.verich.padel.common.jpa.exception.nullfield.MkJpaNullUniqueException;
import com.verich.padel.common.jpa.port.MkJpaReaderPort;
import com.verich.padel.common.jpa.port.MkJpaWriterPort;
import com.verich.padel.common.jpa.type.MkJpaEntity;
import com.verich.padel.common.jpa.type.MkJpaObject;
import com.verich.padel.common.jpa.utils.MkJpaUtils;

public abstract class MkJpaWriterAdapter<D extends MkJpaObject, E extends MkJpaEntity, ID>
    extends MkJpaReaderAdapter<D, E, ID>
    implements MkJpaWriterPort<D>, MkJpaReaderPort<D> {

  @Override
  public void add(final D persisToAdd) {
    final E entityToAdd = mapper.mapTo(persisToAdd);
    checkIfIsAddable(entityToAdd);
    reposiroty.save(entityToAdd);
  }

  @Override
  @Transactional
  public void addAll(final List<D> persisToAdd) {
    persisToAdd.forEach(this::add);
  }

  @Override
  public void update(final D persisToUpdate) {
    final E entityToUpdate = mapper.mapTo(persisToUpdate);
    checkIfIsUpdateable(entityToUpdate);
    reposiroty.save(entityToUpdate);
  }

  @Override
  @Transactional
  public void updateAll(final List<D> persisToUpdate) {
    persisToUpdate.forEach(this::update);
  }

  @Override
  public void addOrUpdate(final D persisToUpdate) {
    final E entityToUpdate = mapper.mapTo(persisToUpdate);
    reposiroty.save(entityToUpdate);
  }

  @Override
  @Transactional
  public void addOrUpdateAll(final List<D> persisToUpdate) {
    persisToUpdate.forEach(this::addOrUpdate);
  }

  @Override
  public void delete(final D persisToDelete) {
    final E entityToDelete = mapper.mapTo(persisToDelete);
    final E deleteInfo = checkIfIsDeleteable(entityToDelete);
    reposiroty.delete(deleteInfo);
  }

  @Override
  @Transactional
  public void deleteAll(final List<D> persisToDelete) {
    persisToDelete.forEach(this::delete);
  }


  // =======================================================
  // =======================================================
  // checkers
  // =======================================================
  // =======================================================


  private final String ERROR_PERSIS_ALREADY_EXIST =
      "Error:\n - Persistance already exist\n value:\n";

  private final String ERROR_PERSIS_NOT_EXIST =
      "Error:\n - Persistance not exist:\n value:\n";

  private final String ERROR_NULL_ID =
      "Error:\n - Id is null: id -> ";

  private final String ERROR_NULL_ID_AND_NULL_UNIQUE =
      "Error:\n - Id and all unique fields are null: ";

  //////////////////////////////////////////////////////////
  // addable
  //////////////////////////////////////////////////////////

  private void checkIfIsAddable(final E entityToAdd) {

    try {
      final Example<E> example = buildIdExample(entityToAdd);
      if (reposiroty.exists(example))
        throw new MkJpaException(ERROR_PERSIS_ALREADY_EXIST + mapper.mapFrom(entityToAdd));
      return;
    } catch (final MkJpaNullIdException e) {
      throw new MkJpaException(ERROR_NULL_ID + e.getIdFiledNames());
    } catch (final MkJpaAutogeneratedNullIdException e) {}

    try {
      final Example<E> example = buildUniqueExample(entityToAdd);
      if (reposiroty.exists(example))
        throw new MkJpaException(ERROR_PERSIS_ALREADY_EXIST + mapper.mapFrom(entityToAdd));
    } catch (final MkJpaNullUniqueException e) {}

  }

  //////////////////////////////////////////////////////////
  // updateable
  //////////////////////////////////////////////////////////

  private void checkIfIsUpdateable(final E entityToAdd) {

    try {
      final Example<E> example = buildIdExample(entityToAdd);
      if (!reposiroty.exists(example))
        throw new MkJpaException(ERROR_PERSIS_NOT_EXIST + mapper.mapFrom(entityToAdd));
    } catch (final MkJpaNullIdException e) {
      throw new MkJpaException(ERROR_NULL_ID + e.getIdFiledNames());
    } catch (final MkJpaAutogeneratedNullIdException e) {
      throw new MkJpaException(ERROR_NULL_ID + e.getIdName());
    }

  }

  //////////////////////////////////////////////////////////
  // deleteable
  //////////////////////////////////////////////////////////

  private E checkIfIsDeleteable(final E entityToAdd) {

    try {
      final Example<E> example = buildIdExample(entityToAdd);
      final Optional<E> deleteInfo = reposiroty.findOne(example);
      if (deleteInfo.isEmpty())
        throw new MkJpaException(ERROR_PERSIS_NOT_EXIST + mapper.mapFrom(entityToAdd));
      return deleteInfo.get();
    } catch (final MkJpaNullFieldException e) {}

    try {
      final Example<E> example = buildUniqueExample(entityToAdd);
      final Optional<E> deleteInfo = reposiroty.findOne(example);
      if (deleteInfo.isEmpty())
        throw new MkJpaException(ERROR_PERSIS_NOT_EXIST + mapper.mapFrom(entityToAdd));
      return deleteInfo.get();
    } catch (final MkJpaNullUniqueException e) {
      throw new MkJpaException(ERROR_NULL_ID_AND_NULL_UNIQUE + "\n"
          + "ids ->" + MkJpaUtils.findIdFields(entityToAdd) + "\n"
          + "uniques ->" + e.getUniqueFiledsNames());
    }

  }



}
